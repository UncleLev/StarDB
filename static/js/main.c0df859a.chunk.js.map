{"version":3,"sources":["components/header/index.js","components/header/header.js","services/swapi-service.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/random-planet/random-planet.js","components/random-planet/index.js","services/row.js","components/item-details/item-details.js","components/item-details/index.js","components/hoc-helper/with-data.js","components/swapi-service-contexts/swapi-service-contexts.js","components/hoc-helper/with-swapi-service.js","components/hoc-helper/with-child-function.js","components/hoc-helper/compose.js","components/sw-component/person-details.js","components/sw-component/planet-details.js","components/sw-component/startship-details.js","components/item-list/item-list.js","components/item-list/index.js","components/sw-component/item-lists.js","components/pages/people-page.js","components/pages/starships-page.js","components/pages/planets-page.js","components/pages/homepage.js","components/app/index.js","components/app/App.js","index.js"],"names":["Header","className","to","Component","SwapiService","_apiBase","_imgBase","getAllPeople","a","async","getResourse","res","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarShips","_transformStarsship","getStarShip","starships","getPersonImg","getStarShipImg","getPlanetImg","_extractId","url","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","maxAtmospheringSpeed","max_atmosphering_speed","crew","passengers","cargoCapacity","consumables","hyperdriveRating","hyperdrive_rating","MGLT","starshipClass","starship_class","height","mass","hairColor","hair_color","skinColor","skin_color","gender","birthYear","birth_year","eyeColor","eye_color","fetch","this","ok","Error","status","json","item","match","Spinner","ErrorInicator","RandomPlanet","state","loading","error","swapiService","onPlanetLoaded","setState","OnError","err","updatePlanet","Math","floor","random","then","catch","updateInterval","props","interval","setInterval","clearInterval","hasData","errorMessage","spinner","planetView","defaultProps","PlanetView","Fragment","src","alt","Row","left","rigth","Record","field","label","ItemDetails","image","prevProps","itemId","updatePerson","getData","getImgUrl","React","Children","children","child","cloneElement","withData","View","data","update","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","mapMethodsToProps","Wrapped","serviceProps","withChildFunction","fn","compose","fun","comp","reduceRight","prevValue","f","console","log","ItemList","onItemSelected","renderLabel","items","lable","key","onClick","renderName","PersonList","PlanetList","StarshipList","withRouter","history","params","push","PlanetsPage","selectedItem","HomePage","href","target","App","value","path","exact","component","PeoplePage","StarshipsPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0df859a.chunk.js","sourcesContent":["import Header from './header.js';\nexport default Header;","import './header.css'\n\nimport React,{Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default class Header extends Component {\n    render(){\n        return (\n\n            <header className=\"header container\">\n                <nav className=\"nav\">\n                    <Link to=\"/\" className=\"logo\">Star DB</Link>\n                    <ul className=\" nav-list text-success\">\n                        <li className=\"nav-item nav-item\">\n                            <Link to=\"/people\">People</Link>\n                        </li>\n                        <li className=\"nav-item nav-item\">\n                            <Link to=\"/planets\">Planets</Link>\n                        </li>\n                        <li className=\"nav-item nav-item\">\n                            <Link to=\"/starships\">Starships</Link>\n                        </li>\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n};","export default class SwapiService {\n\n    _apiBase = 'https://swapi.co/api';\n    _imgBase = 'http://starwars-visualguide.com/assets/img';\n    async getResourse(url) {\n        const res = await fetch(this._apiBase + url);\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${url} ,  received ${res.status}`);\n        }\n        return await res.json();\n    }\n\n    getAllPeople  = async () => {\n        const res = await this.getResourse(`/people/`);\n        return res.results.map(this._transformPerson);\n    }\n\n    getPerson = async (id) => {\n        const person = await this.getResourse(`/people/${id}/`);\n        return this._transformPerson(person);\n    }\n\n    getAllPlanets= async () => {\n        const res = await this.getResourse(`/planets/`);\n        return res.results.map(this._transformPlanet);\n    }\n\n    getPlanet= async (id) => {\n        const planet = await this.getResourse(`/planets/${id}/`);\n        return this._transformPlanet(planet)\n    }\n\n    getAllStarShips= async () => {\n        const res = await this.getResourse(`/starships/`);\n        return res.results.map(this._transformStarsship);\n    }\n\n    getStarShip = async (id) => {\n        const starships = await this.getResourse(`/starships/${id}/`);\n        return this._transformStarsship(starships);\n    }\n\n    getPersonImg = ({id})  => {\n        return `${this._imgBase}/characters/${id}.jpg`;\n    }\n\n    getStarShipImg = ({id})  => {\n        return `${this._imgBase}/starships/${id}.jpg`;\n    }\n\n    getPlanetImg = ({id})  => {\n        return `${this._imgBase}/planets/${id}.jpg`;\n    }\n    \n\n\n    _extractId(item) {\n        const idRE = /\\/([0-9]*)\\/$/;\n        return item.match(idRE)[1];\n    }\n\n    _transformPlanet = (planet) => {\n        return ({\n            id: this._extractId(planet.url),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        })\n    }\n\n    _transformStarsship = (starships) => {\n        \n        return ({\n            id: this._extractId(starships.url),\n            name: starships.name,\n            model: starships.model,\n            manufacturer: starships.manufacturer,\n            costInCredits: starships.cost_in_credits,\n            length: starships.length,\n            maxAtmospheringSpeed: starships.max_atmosphering_speed,\n            crew: starships.crew,\n            passengers: starships.passengers,\n            cargoCapacity: starships.cargoCapacity,\n            consumables: starships.consumables,\n            hyperdriveRating: starships.hyperdrive_rating,\n            MGLT: starships.MGLT,\n            starshipClass: starships.starship_class,\n        })\n    }\n\n    _transformPerson = (person) => {\n        \n        return ({\n            id: this._extractId(person.url),\n            name: person.name,\n            height: person.height,\n            mass: person.mass,\n            hairColor: person.hair_color,\n            skinColor: person.skin_color,\n            gender: person.gender,\n            birthYear: person.birth_year,\n            eyeColor: person.eye_color\n        })\n    }\n}","import Spinner from './spinner.js';\nexport default Spinner;","import React from 'react';\nimport './spinner.css'\n\nconst  Spinner = () => {\n    return(\n        <div className=\"lds-css ng-scope\">\n            <div className=\"lds-double-ring\">\n                <div></div>\n                <div></div>\n                <div>\n                    <div></div>\n                </div>\n                <div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Spinner;","import ErrorInicator from \"./error-indicator.js\";\n\nexport default ErrorInicator;","import React from 'react';\nimport './error-indicator.css'\n\nconst ErrorIndicator = () => {\n    return(\n        <div className=\"error-indicator\">\n            <span className=\"boom\">Boom</span>\n            <span>\n                Somthing has gone wrong\n            </span>\n            <span>\n                (but we shoto robim)\n            </span>\n        </div>\n    );\n};\n\nexport default ErrorIndicator;","import React, { Component } from \"react\";\nimport \"./random-planet.css\";\n\nimport SwapiService from \"../../services/swapi-service.js\";\nimport Spinner from \"../spinner\";\nimport ErrorIndicator from \"../error-indicator\";\n\nexport default class RandomPlanet extends Component {\n    static defaultProps = {\n        updateInterval: 15000\n    };\n\n    state = {\n        planet: {},\n        loading: true,\n        error: false\n    };\n    swapiService = new SwapiService();\n\n    componentDidMount() {\n        const { updateInterval } = this.props;\n        this.updatePlanet();\n        this.interval = setInterval(this.updatePlanet, updateInterval);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    onPlanetLoaded = (planet) => {\n        this.setState({ planet, loading: false });\n    };\n\n    OnError = (err) => {\n        this.setState({ error: true, loading: false });\n    };\n\n    updatePlanet = () => {\n        const id = Math.floor(Math.random() * (19 - 2) + 2);\n\n        this.swapiService\n            .getPlanet(id)\n            .then(this.onPlanetLoaded)\n            .catch(this.OnError);\n    };\n\n    render() {\n        const { error, planet, loading } = this.state;\n        const hasData = !(loading || error);\n        const errorMessage = error ? <ErrorIndicator /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const planetView = hasData ? <PlanetView planet={planet} /> : null;\n\n        return (\n            <div className=\"random-planet bg-dark\">\n                {errorMessage}\n                {spinner}\n                {planetView}\n            </div>\n        );\n    }\n}\n\nconst PlanetView = ({ planet }) => {\n    const { population, name, diameter, rotationPeriod, id } = planet;\n    return (\n        <React.Fragment>\n            <img\n                src={`http://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\n                alt=\"\"\n                className=\"img\"\n            />\n            <div className=\"planet-details\">\n                <h2>{name}</h2>\n                <ul className=\"details-list list-group\">\n                    <li className=\"details-list-item list-group-item\">\n                        <span className=\"term\">Population: </span>\n                        <span>{population}</span>\n                    </li>\n                    <li className=\"details-list-item list-group-item\">\n                        <span className=\"term\">Rotation Period: </span>\n                        <span>{rotationPeriod}</span>\n                    </li>\n                    <li className=\"details-list-item list-group-item\">\n                        <span className=\"term\">Diameter: </span>\n                        <span>{diameter}</span>\n                    </li>\n                </ul>\n            </div>\n        </React.Fragment>\n    );\n};\n","import RandomPlanet from './random-planet.js';\nexport default RandomPlanet;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport './row.css';\n\n\nconst Row = ({left,rigth}) => {\n    return(\n        <div className=\"row\">\n            <div className=\"row-left\">\n                {left}\n            </div>\n            <div className=\"row-rigth\">\n                {rigth}\n            </div>\n        </div>\n    );\n};\n\nRow.propTypes = {\n    left: PropTypes.node,\n    rigth: PropTypes.node\n};\n\nexport default Row;","import React,{Component} from 'react';\nimport './item-details.css'\nimport SwapiService from '../../services/swapi-service';\n\nconst Record = ({ item, field,label}) => {\n    return(\n        <li className=\"details-list-item list-group-item\">\n            <span className=\"term\">{label}: </span>\n            <span>{item[field]}</span>\n        </li>\n    );\n}\n\nexport {\n    Record\n};\n\nexport default class ItemDetails  extends Component {\n\n    swapiService = new SwapiService();\n\n\n    state = {\n        item: null,\n        image: null\n    };\n\n    componentDidUpdate (prevProps) {\n        if(this.props.itemId !== prevProps.itemId) {\n            this.updatePerson();\n        }\n        \n    }\n    \n    componentDidMount(){\n        this.updatePerson();\n    }\n\n    updatePerson() {\n        const {itemId,getData,getImgUrl} = this.props;\n        \n        if (!itemId) {\n            return;\n        }\n\n        getData(itemId)\n            .then((item)=>{\n                this.setState({\n                    item,\n                    image: getImgUrl(item)\n                });\n            })\n    }\n\n    render(){\n        if(!this.state.item) {\n            return <span>Select person from list</span>\n        }\n\n        const {item: {name},image} = this.state;\n        const {item} = this.state;\n        \n\n        return (\n            <div className=\"person-details bg-dark\">\n                <img src={image} alt=\"\" className=\"img\" />\n\n                <div className=\"details-wrap\">\n                    <h2>{name}</h2>\n                    <ul className=\"details-list list-group\">\n                        {\n                            React.Children.map(this.props.children,(child)=>{\n                                return React.cloneElement(child, { item });\n                            })\n                        }\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n};","import ItemDetails,{Record} from './item-details';\n// impoer ItemDetails from './'\nexport default ItemDetails;\nexport {Record};","import React,{Component} from 'react';\nimport Spinner from '../spinner';\n\nconst withData = (View) => {\n    return class extends Component {\n        state = {\n            data: null,\n            loading: true,\n            error: false\n        }\n    \n        componentDidUpdate(prevProps) {\n            if(this.props.getData !== prevProps.getData){\n                this.update();\n            }\n        }\n\n        componentDidMount () {\n            this.update();\n        }\n\n        update() {\n            this.setState({\n                loading:true,\n                error:false\n            })\n            this.props.getData()\n            .then((data)=>{\n                this.setState({\n                    data,\n                    loading: false\n                })\n            })\n            .catch(()=>{\n                this.setState({error: true,loading: false})\n            })\n        }\n\n        render() {\n            const {data,loading} = this.state;\n\n            if (loading) {\n                return <Spinner /> ;\n            }\n\n            return <View {...this.props} data={data}/>\n        }\n    }\n}\n\nexport default withData;","import React from 'react';\n\nconst {Provider: SwapiServiceProvider, Consumer: SwapiServiceConsumer} = React.createContext();\n\nexport {SwapiServiceProvider, SwapiServiceConsumer}","import React from 'react';\nimport {SwapiServiceConsumer} from '../swapi-service-contexts';\n\nconst withSwapiService = (mapMethodsToProps) => (Wrapped) => {\n\n    return (props) => {\n       return ( <SwapiServiceConsumer>\n            {\n                (swapiService) => {\n                    const serviceProps = mapMethodsToProps(swapiService);\n\n                    return (\n                        <Wrapped {...props}  {...serviceProps}/>\n                    );\n                }\n            }\n        </SwapiServiceConsumer>\n       );\n    }\n}\n\nexport default withSwapiService;","import React from 'react';\n\nconst withChildFunction = (fn) => (Wrapped) => {\n    return (props) => {\n        return (\n            <Wrapped {...props}>\n                {fn}\n            </Wrapped>\n        )\n    }\n};\n\nexport default withChildFunction;","const compose = (...fun) => (comp) => {\n    return fun.reduceRight((prevValue,f)=>f(prevValue),comp);\n};\n\nexport default compose;","import React from 'react';\nimport ItemDetails, {Record} from '../item-details';\nimport { withSwapiService } from '../hoc-helper';\n\n\nconst PersonDetails = (props) => {\n    \n    return (\n        <ItemDetails {...props}>\n            <Record field=\"height\" label=\"Height\" />\n            <Record field=\"mass\" label=\"Mass\" />\n            <Record field=\"hairColor\" label=\"Hair color\" />\n            <Record field=\"skinColor\" label=\"Skin color\" />\n            <Record field=\"eyeColor\" label=\"Eye color\" />\n            <Record field=\"birthYear\" label=\"Birth year\" />\n            <Record field=\"gender\" label=\"Gender\" />\n        </ItemDetails>\n    );\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    \n    return{\n        getData: swapiService.getPerson,\n        getImgUrl: swapiService.getPersonImg\n    }\n}\n\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);","import React from 'react';\nimport ItemDetails, {Record} from '../item-details';\nimport { withSwapiService } from '../hoc-helper';\n\n\nconst PlanetDetails = (props) => {\n    return(\n        \n        <ItemDetails {...props}>\n            <Record field=\"name\" label=\"Name\" />\n            <Record field=\"population\" label=\"Population\" />\n            <Record field=\"diameter\" label=\"Diameter\" />\n        </ItemDetails>\n                    \n    );\n};\n\n\nconst mapMethodsToProps = (swapiService) => {\n    return{\n        getData: swapiService.getPlanet,\n        getImgUrl: swapiService.getPlanetImg\n    }\n}\n\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);","import React from \"react\";\nimport ItemDetails, { Record } from \"../item-details\";\nimport { withSwapiService } from \"../hoc-helper\";\n\nconst StarshipDetails = (props) => {\n    console.log(props);\n\n    return (\n        <ItemDetails {...props}>\n            <Record field=\"model\" label=\"Model\" />\n            <Record field=\"manufacturer\" label=\"Manufacturer\" />\n            <Record field=\"costInCredits\" label=\"Cost\" />\n            <Record field=\"length\" label=\"Length\" />\n            <Record\n                field=\"maxAtmospheringSpeed\"\n                label=\"max atmosphering speed\"\n            />\n            <Record field=\"crew\" label=\"Crew\" />\n            <Record field=\"passengers\" label=\"Passengers\" />\n            <Record field=\"consumables\" label=\"Consumables\" />\n            <Record field=\"hyperdriveRating\" label=\"Hyperdrive rating\" />\n            <Record field=\"MGLT\" label=\"MGLT\" />\n        </ItemDetails>\n    );\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getStarShip,\n        getImgUrl: swapiService.getStarShipImg\n    };\n};\n\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);\n","import React from \"react\";\nimport \"./item-list.css\";\nimport PropTypes from \"prop-types\";\n\nconst ItemList = (props) => {\n    const { data, onItemSelected, children: renderLabel } = props;\n    const items = data.map((item) => {\n        const { id } = item;\n        const lable = renderLabel(item);\n        return (\n            <li\n                className=\"list-group-item\"\n                key={id}\n                onClick={() => onItemSelected(id)}\n            >\n                {lable}\n            </li>\n        );\n    });\n\n    return <ul className=\"item-list list-group\">{items}</ul>;\n};\n\nItemList.defaultProps = {\n    onItemSelected: () => {}\n};\n\nItemList.propTypes = {\n    onItemSelected: PropTypes.func,\n    data: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default ItemList;\n","import ItemList from './item-list.js';\nexport default ItemList;","import React from 'react';\nimport ItemList from '../item-list';\nimport {withData,withSwapiService, withChildFunction, compose} from '../hoc-helper';\n\n\nconst mapPersonMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPeople\n    };\n}\n\nconst mapPlanetMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPlanets\n    };\n}\n\nconst mapStarshipMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllStarShips\n    };\n}\n\nconst renderName = ({name})=><span>{name}</span>;\nconst renderModelAndName = ({model,name}) => <span>{name} ({model})</span>;\n\nconst PersonList  = compose(\n                            withSwapiService(mapPersonMethodsToProps),\n                            withData,\n                            withChildFunction(renderName))\n                            (ItemList);\nconst PlanetList  = compose(\n                            withSwapiService(mapPlanetMethodsToProps),\n                            withData,\n                            withChildFunction(renderName))\n                            (ItemList);\nconst StarshipList  = compose(\n                            withSwapiService(mapStarshipMethodsToProps),\n                            withData,\n                            withChildFunction(renderModelAndName))\n                            (ItemList);\n\n                            \nexport {\n    PersonList,\n    PlanetList,\n    StarshipList\n};","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./pages.css\";\nimport Row from \"../../services/row\";\nimport { PersonDetails, PersonList } from \"../sw-component\";\n\nconst PeoplePage = ({ history, match }) => {\n    const { id } = match.params;\n\n    return (\n        <div className=\"page-wrap\">\n            <h2 className=\"page-title\">People </h2>\n            <p className=\"page-inf\">\n                Here you can chose person from list and read information about\n                him/her/it\n            </p>\n            <Row\n                left={<PersonDetails itemId={id} />}\n                rigth={\n                    <PersonList\n                        onItemSelected={(id) => {\n                            history.push(`/people/${id}`);\n                        }}\n                    />\n                }\n            />\n        </div>\n    );\n};\n\nexport default withRouter(PeoplePage);\n","import React from \"react\";\nimport { StarshipList, StarshipDetails } from \"../sw-component\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./pages.css\";\nimport Row from \"../../services/row\";\n\nconst StarshipsPage = ({ history, match }) => {\n    const { id } = match.params;\n    console.log(id);\n\n    return (\n        <div className=\"page-wrap\">\n            <h2 className=\"page-title\">Starships </h2>\n            <p className=\"page-inf\">\n                Here you can chose starship from list and read information about\n                it\n            </p>\n            <Row\n                left={<StarshipDetails itemId={id} />}\n                rigth={\n                    <StarshipList\n                        onItemSelected={(id) => {\n                            history.push(`/starships/${id}`);\n                        }}\n                    />\n                }\n            />\n        </div>\n    );\n};\n\nexport default withRouter(StarshipsPage);\n","import React, { Component } from \"react\";\nimport Row from \"../../services/row\";\nimport { PlanetDetails, PlanetList } from \"../sw-component\";\nimport \"./pages.css\";\n\nexport default class PlanetsPage extends Component {\n    state = {\n        selectedItem: null\n    };\n\n    onItemSelected = (selectedItem) => {\n        this.setState({ selectedItem });\n    };\n\n    render() {\n        return (\n            <div className=\"page-wrap\">\n                <h2 className=\"page-title\">Planet</h2>\n                <p className=\"page-inf\">\n                    Here you can chose planet from list and read information\n                    about it\n                </p>\n                <Row\n                    left={<PlanetDetails itemId={this.state.selectedItem} />}\n                    rigth={<PlanetList onItemSelected={this.onItemSelected} />}\n                />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\r\nimport \"./pages.css\";\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"page-wrap\">\r\n            <h2 className=\"page-title\">Star DB </h2>\r\n            <p className=\"page-inf\">\r\n                Start DB - project where you can found information about\r\n                planets, people, starships from universe of Star Wars. We are\r\n                using open sourse data base{\" \"}\r\n                <a href=\"https://swapi.co/\" target=\"_blank\">\r\n                    SWAPI\r\n                </a>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","import App from './App.js';\nexport default App;","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Header from \"../header\";\nimport RandomPlanet from \"../random-planet\";\nimport { PeoplePage, PlanetsPage, StarshipsPage, HomePage } from \"../pages\";\n\n// import PersonDetails from '../person-details'\n// import ItemList from '../item-list';\n// import PersonPage from '../person-page/person-page';\n// import Row from '../../services/row';\n\nimport SwapiService from \"../../services/swapi-service\";\nimport { SwapiServiceProvider } from \"../swapi-service-contexts\";\n\nexport default class App extends Component {\n    swapiService = new SwapiService();\n\n    render() {\n        return (\n            <SwapiServiceProvider value={this.swapiService}>\n                <Router>\n                    <div className=\"container\">\n                        <Header />\n                        <RandomPlanet />\n                        <Route path=\"/\" exact component={HomePage} />\n                        <Route path=\"/people/:id?\" component={PeoplePage} />\n                        <Route path=\"/planets/\" component={PlanetsPage} />\n                        <Route\n                            path=\"/starships/:id?\"\n                            component={StarshipsPage}\n                        />\n                    </div>\n                </Router>\n            </SwapiServiceProvider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.min.css';\nimport App from './components/app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}